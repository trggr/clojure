(ns evolution)

(def *width* 100)
(def *height* 30)
(def *jungle* '(45 10 10 10))
(def *plant-energy* 80)
(def *plants* #{})
(def *animals* ())

(defn random [range]
  (Math/round (rand range)))

(defn random-plant [left top width height]
  (let [pos (list (+ left (random width)) (+ top (random height)))]
    pos))

(defn add-plants [plants]
  (conj 
    (conj plants (apply random-plant *jungle*))
    (random-plant 0 0 *width* *height*)))

(defstruct animal :x :y :energy :dir :genes)

(def *plants* (add-plants *plants*))
(def *animals*
  (list (struct animal (bit-shift-right *width* 1)
                (bit-shift-right *height* 1)
                1000
                0
                (map (fn [x] (random 10)) (take 10 (iterate inc 0))))))